<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NiceLeeのBlog</title>
    <description>NiceLee的个人博客</description>
    <link>https://nicelee.top/</link>
    <atom:link href="https://nicelee.top/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 12 Jul 2025 22:42:43 +0800</pubDate>
    <lastBuildDate>Sat, 12 Jul 2025 22:42:43 +0800</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>备忘录 使用脚本通过API上传腾讯证书</title>
        <description>先讲一下心路历程。
&lt;ul&gt;
  &lt;li&gt;
    为什么是主域名来使用腾讯的EdgeOne服务？&lt;br /&gt;
本来打算&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edge.nicelee.top&lt;/code&gt;使用腾讯服务作博客的镜像站的，也确实是这么做的。奈何完成后才发现Github Pages有些页面301跳转会直接到主站。&lt;br /&gt;
在腾讯这边研究了半天，好像没什么方法将返回的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;location&lt;/code&gt;字段的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;host&lt;/code&gt;替换（这点不如Fastly）。  &lt;br /&gt;
没奈何只能主域名了。原先的Serv00迁移到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ser.nicelee.top&lt;/code&gt;。
  &lt;/li&gt;
  &lt;li&gt;
    为什么使用上传的证书，而不是系统自动申请免费证书？&lt;br /&gt;
腾讯云会验证CNAME，而托管到Cloudflare的域名会自动拉平，验证始终通不过，也就没法自动申请了。
  &lt;/li&gt;
  &lt;li&gt;
    如何用脚本实现API的签名校验？&lt;br /&gt;
参考文档&lt;a href=&quot;https://cloud.tencent.com/document/product/400/41661&quot;&gt;签名方法 v3&lt;/a&gt; &lt;br /&gt;
参考&lt;a href=&quot;https://github.com/TencentCloud/signature-process-demo/blob/main/signature-v3/bash/signv3.sh&quot;&gt;demo&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    错误提示：当前为白名单功能，非白名单用户无法使用该功能，请联系SSL证书特殊处理&lt;br /&gt;
这个使用的是API &lt;a href=&quot;https://cloud.tencent.com/document/product/400/119791&quot;&gt;更新证书内容（证书ID不变）并更新关联的云资源&lt;/a&gt;。&lt;br /&gt;
根据工单，这个接口UploadUpdateCertificateInstance目前只能更新CLB资源，建议使用接口UpdateCertificateInstance去更新证书。&lt;br /&gt;
详情可参考&lt;a href=&quot;https://cloud.tencent.com/document/product/400/91649&quot;&gt;一键更新新旧证书资源&lt;/a&gt;。
  &lt;/li&gt;
  &lt;li&gt;
    新生成的证书每次证书ID都在变化，那么该如何获取呢？&lt;br /&gt;
通过查询近三个月内的&lt;a href=&quot;https://cloud.tencent.com/document/product/400/41672&quot;&gt;获取证书操作日志&lt;/a&gt;，找到最新的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uploadFromYunAPI&lt;/code&gt;操作，就能找到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CertId&lt;/code&gt;。&lt;br /&gt;
如果有多个证书，你可以为每个证书分配不同权限，匹配&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SubAccountUin&lt;/code&gt;即可。&lt;br /&gt;
举例如下：
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;json_output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'
{
  &quot;Response&quot;: {
    &quot;AllTotal&quot;: 3,
    &quot;TotalCount&quot;: 3,
    &quot;OperateLogs&quot;: [
      {
        &quot;Action&quot;: &quot;用户[uin: 10001] 上传 证书[id: foo1]&quot;,
        &quot;CreatedOn&quot;: &quot;2025-07-12 18:18:18&quot;,
        &quot;Uin&quot;: &quot;10001&quot;,
        &quot;SubAccountUin&quot;: &quot;10001&quot;,
        &quot;CertId&quot;: &quot;foo1&quot;,
        &quot;Type&quot;: &quot;uploadFromYunAPI&quot;
      },
      {
        &quot;Action&quot;: &quot;用户[uin: 10001]  证书[id: foo0]&quot;,
        &quot;CreatedOn&quot;: &quot;2025-07-12 18:18:18&quot;,
        &quot;Uin&quot;: &quot;10001&quot;,
        &quot;SubAccountUin&quot;: &quot;10001&quot;,
        &quot;CertId&quot;: &quot;foo0&quot;,
        &quot;Type&quot;: &quot;ignoreExpiringNotice-1&quot;
      },
      {
        &quot;Action&quot;: &quot;用户[uin: 10001] 上传 证书[id: foo0]&quot;,
        &quot;CreatedOn&quot;: &quot;2025-07-12 16:16:16&quot;,
        &quot;Uin&quot;: &quot;10001&quot;,
        &quot;SubAccountUin&quot;: &quot;10001&quot;,
        &quot;CertId&quot;: &quot;foo0&quot;,
        &quot;Type&quot;: &quot;uploadFromYunAPI&quot;
      }
    ],
    &quot;RequestId&quot;: &quot;xxx-xxx-xxx-xxx&quot;
  }
}'&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;latest_cert_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$json_output&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  jq &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.Response.OperateLogs |
    map(select(.Type == &quot;uploadFromYunAPI&quot;)) |
    sort_by(.CreatedOn) |
    last |
    .CertId'&lt;/span&gt;
&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sat, 12 Jul 2025 21:30:01 +0800</pubDate>
        <pubDateFormat>2025-07-12</pubDateFormat>
        <link>https://nicelee.top/blog/2025/07/12/tencent-ssl-cert/</link>
        <guid isPermaLink="true">https://nicelee.top/blog/2025/07/12/tencent-ssl-cert/</guid>
        
        <category>建站</category>
        
        <category>知识库</category>
        
        
        <category>技术学习</category>
        
      </item>
    
      <item>
        <title>本博客镜像TCP ping速度比较</title>
        <description>闲得蛋疼搞了很多镜像，通过itdog的TCP ping的方式简陋的比较了一下接入速度。&lt;br /&gt;
测试时间在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2025-07-12 21:20&lt;/code&gt;左右，应该算是接近晚高峰了吧？另外ItDog保存的图接近9M且比较长，不好展示，干脆截个图意思意思就算了。&lt;br /&gt;
理论上比较有说服力的应该是多次HTTP ping取平均，没这条件只能将就一下。

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://nicelee.top&quot;&gt;nicelee.top&lt;/a&gt;使用了腾讯EdgeOne的服务（全球可用区不含大陆），首次访问都需要拉取Github Pages，有缓存。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.nicelee.top&quot;&gt;blog.nicelee.top&lt;/a&gt;采用Vercel的静态托管服务，每次push会触发构建，不需要拉取Github Pages。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://oh-my-blog.nicelee.top&quot;&gt;oh-my-blog.nicelee.top&lt;/a&gt;采用Netlify的静态托管服务，每次push会触发构建，不需要拉取Github Pages。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nicelee.top&quot;&gt;fastly.nicelee.top&lt;/a&gt;使用了Fastly的CDN服务。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ser.nicelee.top&quot;&gt;ser.nicelee.top&lt;/a&gt;使用了Serv00的服务，每次push会在Github生成相应静态文件，通过webhook的方式进行拉取同步。&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 12 Jul 2025 21:25:01 +0800</pubDate>
        <pubDateFormat>2025-07-12</pubDateFormat>
        <link>https://nicelee.top/blog/2025/07/12/mirror-compare/</link>
        <guid isPermaLink="true">https://nicelee.top/blog/2025/07/12/mirror-compare/</guid>
        
        <category>建站</category>
        
        
        <category>杂七杂八</category>
        
      </item>
    
      <item>
        <title>备忘录 Location Guard(PC端)快捷使用指南</title>
        <description>&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location Guard&lt;/code&gt;应该说是较为常见的插件，一种经典的应用场景是Google搜索然后上报位置拯救宋仲基。

当我有很多隶属于不同位置的小鸡，更改位置时的一般做法是：通过关键词搜索确定大概位置，然后调整具体定位。

但是的话，由于搜索api的Key是所有人共享的，有时候会遇到次数限制，这时候就只能凭感觉盲点了，非常麻烦。

本文记录一种更方便的方法。
</description>
        <pubDate>Thu, 22 May 2025 11:30:01 +0800</pubDate>
        <pubDateFormat>2025-05-22</pubDateFormat>
        <link>https://nicelee.top/blog/2025/05/22/location-guard-pc-instruction/</link>
        <guid isPermaLink="true">https://nicelee.top/blog/2025/05/22/location-guard-pc-instruction/</guid>
        
        <category>浏览器扩展</category>
        
        
        <category>技术学习</category>
        
      </item>
    
      <item>
        <title>备忘录 关于Firefox的二三事(三)</title>
        <description>插件&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Firefox Multi-Account Containers&lt;/code&gt;很好用，但是也没有想象的那么好用。
</description>
        <pubDate>Tue, 22 Apr 2025 11:30:01 +0800</pubDate>
        <pubDateFormat>2025-04-22</pubDateFormat>
        <link>https://nicelee.top/blog/2025/04/22/sth-about-mozilla-firefox-3/</link>
        <guid isPermaLink="true">https://nicelee.top/blog/2025/04/22/sth-about-mozilla-firefox-3/</guid>
        
        <category>浏览器扩展</category>
        
        
        <category>技术学习</category>
        
      </item>
    
      <item>
        <title>备忘录 Putty 密钥+代理的自动设置</title>
        <description>本文是&lt;a href=&quot;/blog/2018/12/09/putty/&quot;&gt;Putty 免密自动登录设置&lt;/a&gt;这篇文章的补充。&lt;br /&gt;
附加需求有两个，即使用指定密钥登录而不是密码登录，以及设置代理。
</description>
        <pubDate>Tue, 18 Mar 2025 11:30:01 +0800</pubDate>
        <pubDateFormat>2025-03-18</pubDateFormat>
        <link>https://nicelee.top/blog/2025/03/18/putty-2/</link>
        <guid isPermaLink="true">https://nicelee.top/blog/2025/03/18/putty-2/</guid>
        
        <category>知识库</category>
        
        
        <category>小技巧</category>
        
      </item>
    
      <item>
        <title>备忘录 htaccess进一步完善</title>
        <description>当前出现了一个意料之外的问题：静态网站访问路径对应的是文件夹时，会列出对应的目录文件。&lt;br /&gt;
我们需要这样的效果：目录中存在 index.html，则允许访问；否则返回404，而不是列出目录。
</description>
        <pubDate>Fri, 07 Mar 2025 11:30:01 +0800</pubDate>
        <pubDateFormat>2025-03-07</pubDateFormat>
        <link>https://nicelee.top/blog/2025/03/07/htaccess/</link>
        <guid isPermaLink="true">https://nicelee.top/blog/2025/03/07/htaccess/</guid>
        
        <category>知识库</category>
        
        
        <category>小技巧</category>
        
      </item>
    
      <item>
        <title>备忘录 证书与CF Workers KV Storage</title>
        <description>前情提要： 我在一台机器上部署了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;acme.sh&lt;/code&gt;脚本，申请通配符证书，确保证书在这台机器上是一直有效的。 &lt;br /&gt;
当机器有多台的时候，我想共用申请的证书，而不是在每一台上都再来一次。 &lt;br /&gt;
这就要有一个存放证书的地方。&lt;br /&gt;
本着不额外花费资源的原则，托管我域名DNS的CF本身似乎是一个挺好的选择。
</description>
        <pubDate>Thu, 13 Feb 2025 11:30:01 +0800</pubDate>
        <pubDateFormat>2025-02-13</pubDateFormat>
        <link>https://nicelee.top/blog/2025/02/13/ssl-cert-cf-kv/</link>
        <guid isPermaLink="true">https://nicelee.top/blog/2025/02/13/ssl-cert-cf-kv/</guid>
        
        <category>知识库</category>
        
        
        <category>技术学习</category>
        
      </item>
    
      <item>
        <title>备忘录 静态博客搬家遇到的一些问题</title>
        <description>前一阵子吧，有段时间Cloudflare连通性较差，想着将github pages的静态页面搬到serv00上去。&lt;br /&gt;
本文记录一些遇到的问题。
</description>
        <pubDate>Sat, 08 Feb 2025 11:30:01 +0800</pubDate>
        <pubDateFormat>2025-02-08</pubDateFormat>
        <link>https://nicelee.top/blog/2025/02/08/serv00-htaccess/</link>
        <guid isPermaLink="true">https://nicelee.top/blog/2025/02/08/serv00-htaccess/</guid>
        
        <category>知识库</category>
        
        
        <category>小技巧</category>
        
      </item>
    
      <item>
        <title>备忘录 自动化申请证书并部署到Gcore</title>
        <description>Gcore CDN在边缘服务器上部署的证书是单/多域名的，这对应于你在CDN部署的域名。 &lt;br /&gt;
但是有时候，我并不想让别人知道某些域名的具体情况，这时候只能自己申请通配符证书，然后替换了。&lt;br /&gt;
既然如此，那么好像也没必要用自签名的证书了，在源端自动化申请部署一条龙服务。
</description>
        <pubDate>Tue, 17 Dec 2024 12:30:01 +0800</pubDate>
        <pubDateFormat>2024-12-17</pubDateFormat>
        <link>https://nicelee.top/blog/2024/12/17/gcore-acme-set/</link>
        <guid isPermaLink="true">https://nicelee.top/blog/2024/12/17/gcore-acme-set/</guid>
        
        <category>知识库</category>
        
        
        <category>小技巧</category>
        
      </item>
    
      <item>
        <title>备忘录 Gcore 信任自签发CA证书</title>
        <description>自签发证书有一个好处，可以一次签很久很久，手动操作一次后面基本上无需烦心。不需要每隔三个月一次，必须搞自动化。&lt;br /&gt;
如何自签发证书在很久以前有过&lt;a href=&quot;/blog/2021/03/26/win-openssl-cerl/&quot;&gt;备忘录&lt;/a&gt;，不过只是记的单域名，没有通配符。&lt;br /&gt;
这里稍微扩展一下，然后的话主要还是记载如何使Gcore信任源端的自签发证书。&lt;br /&gt;
没有技术含量，仅作备忘。
</description>
        <pubDate>Tue, 17 Dec 2024 11:30:01 +0800</pubDate>
        <pubDateFormat>2024-12-17</pubDateFormat>
        <link>https://nicelee.top/blog/2024/12/17/gcore-self-signed-ca/</link>
        <guid isPermaLink="true">https://nicelee.top/blog/2024/12/17/gcore-self-signed-ca/</guid>
        
        <category>知识库</category>
        
        
        <category>小技巧</category>
        
      </item>
    
  </channel>
</rss>
